#######################################################################################################
#
# Build a web app, containerise it with docker, push to the registry 
# and then deploy to a kubernetes cluster
#
# The Kubernetes cluster must be created before running this pipeline.
# This can be created with the following azure command from an azure cloud shell:
#
#     az aks create --resource-group FoodApp --name FoodAppKube1 --node-count 1 --enable-addons monitoring --generate-ssh-keys --attach-acr FoodAppRegistry
#
# Note that the pipeline expects
# 1) A Kubernetes service connection
# 2) A dockers secret named 'food-app-secret' with which to acces the docker registry
# 3) A Service Connection of type Azure Resource Manager called 'FoodAppSubscription' which points 
#    to the azure subcription and the relevant resource group under which the Kubernetes service has been created
#
######################################################################################################


trigger:
- master

resources:
- repo: self

variables:
  deploymentenvirnoment: 'DEV'
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c6eb8dd7-a558-4fef-8cf8-51e9e873c43b'
  imageRepository: 'wstevenfoodapp'
  containerRegistry: 'foodappregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  snapversion: '1st snap version'
  imageName: food-app

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:

# Build the .Net solution, containerise it and push to an Azure docker registry

  - job: Build
    displayName: Build
    
    pool:
      vmImage: $(vmImageName)
    steps:
      - bash: echo "snap version is $(snapversion) "; pwd 
        displayName: 'output snap version'
      - task: NodeTool@0
        inputs:
          versionSpec: '6.x'
          checkLatest: true
      - task: CmdLine@2
        inputs:
          script: 'npm install'
          workingDirectory: ./FoodApp/food-app       
          
      - task: Bash@3
        displayName: Replace windows 'xcopy' with linux 'cp' command
        inputs: 
          targetType: inline
          script: |
            sed -i 's/xcopy.*\"/cp $(ProjectDir)\/..\/..\/FoodApp\/appsettings*.json $(ProjectDir)\"/'   ./Test.Integration/Food.Data.IntTest/Food.Data.IntTest.csproj; 
            sed -i 's/xcopy.*\"/cp $(ProjectDir)\/..\/..\/FoodApp\/appsettings*.json $(ProjectDir)\"/'   ./Test.Integration/FoodDomain.IntTest/FoodDomain.IntTest.csproj; 
            cat ./Test.Integration/Food.Data.IntTest/Food.Data.IntTest.csproj; 
            cat ./Test.Integration/FoodDomain.IntTest/FoodDomain.IntTest.csproj; 

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs: 
          command: restore 
      - task: DotNetCoreCLI@2
        displayName: 'Build $(buildConfiguration)'
        inputs:
          command: build
          arguments: '--configuration $(buildConfiguration)'

# TESTS - TEMPORARILY COMMENTED OUT UNIL THE CONNECTION STRING IS SORTED
# AT THE MOMENT CANNOT ACCESS THE KEY VAULT EVEN VIA A SERVICE PRINCIPAL 
# REFERENCED FROM WITHIN THE CODE
#      - task: DotNetCoreCLI@2
#        displayName: Run Tests
#        inputs: 
#          command: test
#          arguments: '--configuration $(buildConfiguration)'

      - task: Bash@3
        displayName: copying kubernetes config file to build output
        inputs:
          targetType: inline
          script: cp ./food-system.yaml  $(Build.ArtifactStagingDirectory); pwd; ls -R; ls $(Build.ArtifactStagingDirectory)

      - task: DotNetCoreCLI@2
        displayName: Publish Build
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: Docker@2
        displayName: Login to Docker Repo
        inputs:
          command: login
          containerRegistry: FoodAppRegistry

        # tag the image with both 'latest' and the build number
      - task: Docker@2
        displayName: Building Docker Image
        inputs: 
          containerRegistry: FoodAppRegistry
          repository: $(imageName)
          command: build
          Dockerfile: Dockerfile
          tags: |
            $(tag)
            latest
        
        # push both images 'latest' and image with the build number
      - task: Docker@2
        displayName: Push Docker Image
        inputs: 
          containerRegistry: FoodAppRegistry
          repository: $(imageName)
          command: push
          tags: |
            $(tag)
            latest          
 
      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'manifests'

# Deploy the Docker image to the cluster using a kubectl config file

- stage: CD_K8
  displayName: Deploy to Kubernetes Cluster
  jobs:
   - deployment: deployK8
     displayName: deploy image to K8 cluster
     environment: $(deploymentenvirnoment)
     
     strategy:
      runOnce:   #rolling, canary are the other strategies that are supported
        deploy:
          steps:

          - bash: |
              pwd
              ls -R
            displayName: 'List dir contents'


          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              downloadPath: '$(System.DefaultWorkingDirectory)'

          - bash: |
              pwd
              ls -R
            displayName: 'List dir contents'

          - task: ExtractFiles@1
            displayName: 'Extract files '
            inputs:
              destinationFolder: '$(System.DefaultWorkingDirectory)/_wsteven101.FoodApp/artifact'
              overwriteExistingFiles: true

          - bash: |
              pwd
              ls -R
            displayName: 'List dir contents'

# replaced the kubernetes out of the box task with the manifest one below for the ease
# of appending the build id to the docker image within the k8 config file.
# One could instead have used this commented out section and passed the build id as an argument
#          - task: Kubernetes@1
#            displayName: 'kubectl apply'
#            inputs:
#                kubernetesServiceEndpoint: 'K8 FoodApp V4'
#                command: apply
#                useConfigurationFile: true
#                configuration: '$(System.DefaultWorkingDirectory)/_wsteven101.FoodApp/artifact/food-system.yaml'
#                azureSubscriptionEndpointForSecrets: 'Azure Subscription (upgraded from free plan) (dabf6320-db56-447e-86c4-bb677d87a890)'
#                azureContainerRegistry: foodappregistry.azurecr.io
#                secretName: 'food-app-secret'

          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'K8 FoodApp V10'
              namespace: 'default'
              #20210912 manifests: '$(System.DefaultWorkingDirectory)/_wsteven101.FoodApp/artifact/food-system.yaml'
              #20210912 containers: 'foodappregistry.azurecr.io/food-app:$(tag)'
              #20210912 imagePullSecrets: 'food-app-secret'

# Check if the pod's port has already been exposed by looking for the service food-app-deploy-http2

#   - job: checkPort
#     displayName: check for port
#     dependsOn: deployK8
#     steps:       
#          - task: Kubernetes@1
#            inputs:
#              connectionType: 'Kubernetes Service Connection'
#              kubernetesServiceEndpoint: 'K8 FoodApp V5'
#              namespace: 'default'
#              command: 'get'
#              arguments: 'service food-app-deploy-http2'
#              secretType: 'dockerRegistry'
#              containerRegistryType: 'Azure Container Registry'

# Expose the port has not already been exposed (i.e. run if job 'checkPort' ddn't find the service already)

#   - deployment: exposeport
#     dependsOn: checkPort
#     condition: failed()   
#     displayName: expose port
#     environment: $(deploymentenvirnoment)
#
#     strategy:
#      runOnce:   #rolling, canary are the other strategies that are supported
#        deploy:
#          steps:
#
#          - task: Kubernetes@1
#            displayName: 'kubectl expose'
#            continueOnError: true
#            inputs:
#              kubernetesServiceEndpoint: 'K8 FoodApp V4'
#              namespace: default
#              command: expose
#              arguments: 'deployment food-system --type=LoadBalancer --port 5000  --name=food-app-deploy-http2'
#              azureSubscriptionEndpointForSecrets: 'FoodAppSubscription'
#              azureContainerRegistry: foodappregistry.azurecr.io
#              secretName: '2842ba3a-9ef1-4065-9c35-d1ba2a7a77d5'


    
        
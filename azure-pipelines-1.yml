# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  deploymentenvirnoment: 'DEV'
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c6eb8dd7-a558-4fef-8cf8-51e9e873c43b'
  imageRepository: 'wstevenfoodapp'
  containerRegistry: 'foodappregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  snapversion: '1st snap version'
  imageName: food-app

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    
    pool:
      vmImage: $(vmImageName)
    steps:
      - bash: echo "snap version is $(snapversion) "; pwd 
        displayName: 'output snap version'
      - task: NodeTool@0
        inputs:
          versionSpec: '6.x'
          checkLatest: true
      - task: CmdLine@2
        inputs:
          script: 'npm install'
          workingDirectory: ./FoodApp/food-app       
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs: 
          command: restore 
      - task: DotNetCoreCLI@2
        displayName: 'Build $(buildConfiguration)'
        inputs:
          command: build
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs: 
          command: test
          arguments: '--configuration $(buildConfiguration)'

      - task: Bash@3
        displayName: copying kubernetes config file to build output
        inputs:
          targetType: inline
          script: cp ./food-system.yaml  $(Build.ArtifactStagingDirectory); pwd; ls -R; ls $(Build.ArtifactStagingDirectory)

      - task: DotNetCoreCLI@2
        displayName: Publish Build
        inputs:
          command: publish
          publishWebProjects: false
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: Docker@2
        displayName: Login to Docker Repo
        inputs:
          command: login
          containerRegistry: FoodAppRegistry

        
      - task: Docker@2
        displayName: Building Docker Image
        inputs: 
          containerRegistry: FoodAppRegistry
          repository: $(imageName)
          command: build
          Dockerfile: Dockerfile
          tags: pipeline
        
      - task: Docker@2
        displayName: Push Docker Image
        inputs: 
          containerRegistry: FoodAppRegistry
          repository: $(imageName)
          command: push
          tags: pipeline

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'manifests'



- stage: CD_K8
  displayName: Deploy to Kubernetes Cluster
  jobs:
   - job: deployK8
   - deployment: deploy
     displayName: deploy
     environment: $(deploymentenvirnoment)
     
     strategy:
      runOnce:   #rolling, canary are the other strategies that are supported
        deploy:
          steps:

          - bash: |
              pwd
              ls -R
            displayName: 'List dir contents'


          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              downloadPath: '$(System.DefaultWorkingDirectory)'

          - bash: |
              pwd
              ls -R
            displayName: 'List dir contents'

          - task: ExtractFiles@1
            displayName: 'Extract files '
            inputs:
              destinationFolder: '$(System.DefaultWorkingDirectory)/_wsteven101.FoodApp/artifact'
              overwriteExistingFiles: true


          - bash: |
              pwd
              ls -R
            displayName: 'List dir contents'

          - task: Kubernetes@1
            displayName: 'kubectl apply'
            inputs:
                kubernetesServiceEndpoint: 'K8 FoodApp V4'
                command: apply
                useConfigurationFile: true
                configuration: '$(System.DefaultWorkingDirectory)/_wsteven101.FoodApp/artifact/food-system.yaml'
                azureSubscriptionEndpointForSecrets: 'Azure Subscription (upgraded from free plan) (dabf6320-db56-447e-86c4-bb677d87a890)'
                azureContainerRegistry: foodappregistry.azurecr.io
                secretName: 'food-app-secret'

   - job: checkPort
     displayName: check for port
     dependsOn: deployK8
     steps:
#          - bash: |
#              kubectl get services | grep food-app-deploy-http2
#            displayName: 'Test for resource '          
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'K8 FoodApp V4'
              namespace: 'default'
              command: 'get'
              arguments: 'service food-app-deploy-http2'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

   - deployment: exposeport
     dependsOn: checkPort
     condition: failed()   
     displayName: expose port
     environment: $(deploymentenvirnoment)

     strategy:
      runOnce:   #rolling, canary are the other strategies that are supported
        deploy:
          steps:

          - task: Kubernetes@1
            displayName: 'kubectl expose'
            continueOnError: true
            inputs:
              kubernetesServiceEndpoint: 'K8 FoodApp V4'
              namespace: default
              command: expose
              arguments: 'deployment food-system --type=LoadBalancer --port 5000  --name=food-app-deploy-http2'
              azureSubscriptionEndpointForSecrets: 'Azure Subscription (upgraded from free plan) (dabf6320-db56-447e-86c4-bb677d87a890)'
              azureContainerRegistry: foodappregistry.azurecr.io
              secretName: '2842ba3a-9ef1-4065-9c35-d1ba2a7a77d5'


{"version":3,"sources":["Classes/BagItem.ts","Classes/FoodItem.ts","Classes/NutritionalContent.ts","Contexts/RecentItemsContext.ts","ItemComponents/Food.tsx","ItemComponents/Bag.tsx","SharedComponents/MainMenu.tsx","SharedComponents/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BagItem","id","name","bags","foods","FoodItem","nutrition","NutritionalContent","fat","saturatedFat","sugar","salt","RecentItem","link","RecentItemsContext","React","createContext","itemHistory","Array","addFoodToHistory","console","log","addBagToHistory","Food","nameParam","updatedFoodCallback","openButtonText","useState","food","setFood","setName","buttonText","setButtonText","recentItems","useContext","getFoodItem","newName","a","defaultFoodItem","trimEnd","length","updateFood","fetch","response","status","json","jsonItem","foodItem","String","postFoodItem","requestOptions","method","headers","body","JSON","stringify","useEffect","handleNumericInputChange","event","val","target","value","isArray","parseFloat","handleOpenEvent","handleSaveEvent","Number","onSubmit","preventDefault","className","onChange","type","e","Button","Bag","item","foodNodes","bagNodes","bag","setBag","modified","setModified","selectedFood","setSelectedFood","getItem","defaultItem","updateItem","toString","postItem","bagItem","map","i","Fragment","quantity","node","newQty","currNode","handleBagQtyChanged","variant","size","active","handleFoodQtyChanged","onClick","foodName","trim","MainMenu","history","useHistory","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","x","idx","Item","push","Form","Group","controlId","Label","Control","as","custom","MainPage","newItem","itemHistState","concat","setItemHistState","prevState","Provider","path","render","props","match","params","exact","bagName","App","init","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.011d0b0f.chunk.js","sourcesContent":["import { FoodItem } from './FoodItem';\r\nimport { FoodItemNode } from './FoodItemNode';\r\nimport { BagItemNode } from './BagItemNode';\r\n\r\n\r\nexport class BagItem {\r\n    \r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public bags: Array<BagItemNode>,\r\n        public foods: Array<FoodItemNode> ) { }\r\n\r\n}\r\n","import { NutritionalContent } from \"./NutritionalContent\";\r\n\r\nexport class FoodItem {\r\n\r\n    constructor(\r\n        public id: number,\r\n        public name: string,\r\n        public nutrition: NutritionalContent\r\n    ) {  }\r\n\r\n}","\r\n\r\nexport class NutritionalContent {\r\n\r\n    constructor(\r\n        public fat: number,\r\n        public saturatedFat: number,\r\n        public sugar: number,\r\n        public salt: number) { }\r\n\r\n}","import React from \"react\";\r\n\r\nexport class RecentItem {\r\n    constructor(public name: string, public link: string) { }\r\n} \r\n\r\nexport const RecentItemsContext = React.createContext({\r\n\r\n    itemHistory: new Array<RecentItem>(),\r\n    addFoodToHistory: (name: string) => { console.log(\"Default called. Define RecentItemsContext: addFoodToHistory\");  },\r\n    addBagToHistory: () => { }\r\n\r\n});","import React, {useState, useEffect, ChangeEvent, FormEvent, useContext } from 'react';\r\nimport { isArray } from 'util';\r\nimport { FoodItem } from '../Classes/FoodItem';\r\nimport { NutritionalContent } from '../Classes/NutritionalContent';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Food.css';\r\nimport { RecentItem, RecentItemsContext } from '../Contexts/RecentItemsContext';\r\n\r\n\r\nconst Food: React.FC<{ nameParam: string, updatedFoodCallback: (i:number) => void }> = ({ nameParam, updatedFoodCallback }) =>\r\n{\r\n    const openButtonText: string = \"Open\";\r\n    const saveButtonText: string = \"Save\";\r\n\r\n    const [food, setFood] = React.useState(\r\n        {\r\n            name: '',\r\n            fat: '0',\r\n            saturatedFat: '0',\r\n            sugar: '0',\r\n            salt: '0',\r\n            id: 0\r\n        }\r\n    );\r\n    const [name, setName] = React.useState('');\r\n    const [buttonText, setButtonText] = React.useState(openButtonText);\r\n\r\n    const recentItems = useContext(RecentItemsContext);\r\n\r\n    const getFoodItem = async (newName: string) => {\r\n\r\n        setName(newName);\r\n\r\n        const defaultFoodItem = new FoodItem(0, \"\", new NutritionalContent(0.0, 0.0, 0.0, 0.0));\r\n\r\n        if (newName.trimEnd().length == 0) {\r\n            updateFood(defaultFoodItem);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(\r\n            //window.location.href + newName\r\n            \"https://localhost:5001/api/Food/\" + newName\r\n        );\r\n        if (response.status === 200) {\r\n\r\n            const jsonItem = await response.json();\r\n            console.log(jsonItem);\r\n            const foodItem: FoodItem = jsonItem;\r\n            updateFood(foodItem);\r\n            setButtonText('Save');\r\n\r\n            recentItems.addFoodToHistory(newName);\r\n\r\n        }\r\n        else {\r\n            updateFood(defaultFoodItem);\r\n        }\r\n\r\n    }\r\n\r\n    const updateFood = (foodItem: FoodItem) =>\r\n    {\r\n        setFood({\r\n            name: foodItem.name,\r\n            fat: String(foodItem.nutrition.fat),\r\n            saturatedFat: String(foodItem.nutrition.saturatedFat),\r\n            sugar: String(foodItem.nutrition.sugar),\r\n            salt: String(foodItem.nutrition.salt),\r\n            id: foodItem.id\r\n        });\r\n    }\r\n\r\n    const postFoodItem = async (foodItem: FoodItem) => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(foodItem)\r\n        }\r\n        const response = await fetch('https://localhost:5001/api/Food/', requestOptions);\r\n        //const data = response.json();\r\n        //foodItem.id = data.id;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFoodItem(nameParam);\r\n    }, [nameParam] );\r\n\r\n    const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const name = event.target.value;\r\n        setName(name);\r\n    }\r\n\r\n    const handleNumericInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        if (isNumeric(event.target.value) || (event.target.value === \"\")) {\r\n            setFood({ ...food, [event.target.name]: event.target.value });\r\n        }\r\n\r\n    }\r\n\r\n    function isNumeric(val: any): val is number | string {\r\n        // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\r\n        // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n        // subtraction forces infinities to NaN\r\n        // adding 1 corrects loss of precision from parseFloat (#15100)\r\n        return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\r\n    }\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (buttonText === openButtonText) {\r\n            handleOpenEvent();\r\n        } else {\r\n            handleSaveEvent();\r\n        }\r\n    }\r\n\r\n    const handleOpenEvent = () => {\r\n        getFoodItem(name);\r\n    }\r\n\r\n    const handleSaveEvent = () => {\r\n        const foodItem: FoodItem = new FoodItem(food.id, food.name,\r\n            new NutritionalContent(Number(food.fat), Number(food.saturatedFat), Number(food.sugar), Number(food.salt)));\r\n        postFoodItem(foodItem);\r\n        updatedFoodCallback(food.id);\r\n    }\r\n\r\n    //function setStringField(key:string, value:String) {\r\n    //    setFood(ev => ({\r\n    //        ...ev,\r\n    //        [key]: value,\r\n    //    }))\r\n    //}\r\n\r\n    //function setNumberField(key: string, value: String) {\r\n    //    const numValue = Number(value);\r\n    //    setFood(ev => ({\r\n    //        ...ev,\r\n    //        [key]: numValue,\r\n    //    }))\r\n    //}\r\n\r\n    return (\r\n\r\n            <form onSubmit={ handleSubmit}>\r\n                <div className=\"food-layout\">\r\n                    <label className=\"food-label\">Name</label><input name=\"name\" value={name} onChange={handleNameChange} />\r\n                    <label className=\"food-label\">Fat</label><input name=\"fat\"  type=\"number\" value={food.fat} onChange={e => handleNumericInputChange(e)} />\r\n                    <label className=\"food-label\">Saturated Fat</label><input name=\"saturatedFat\" className=\".food-label\" type=\"number\" value={food.saturatedFat} onChange={e => handleNumericInputChange(e)}/>\r\n                    <label className=\"food-label\">Sugar</label><input name=\"sugar\" className=\".food-label\" type=\"number\" value={food.sugar} onChange={e => handleNumericInputChange(e)}/>\r\n                    <label className=\"food-label\">Salt</label><input name=\"salt\" className=\".food-label\" type=\"number\" value={food.salt} onChange={e => handleNumericInputChange(e)} />\r\n                    <label id=\"placeholder\" /><Button type=\"submit\" className=\"submit-button\">{buttonText}</Button>\r\n                </div>\r\n            </form>\r\n\r\n    );\r\n\r\n    useEffect( () => console.log(\"xx\"), []);\r\n}\r\n\r\nexport default Food;","import React, { useState, useEffect, ChangeEvent, FormEvent } from 'react';\r\nimport { isArray } from 'util';\r\nimport { FoodItem } from '../Classes/FoodItem';\r\nimport { NutritionalContent } from '../Classes/NutritionalContent';\r\n\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Bag.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\n\r\nimport { BagItem } from '../Classes/BagItem';\r\nimport { BagItemNode } from '../Classes/BagItemNode';\r\nimport { FoodItemNode } from '../Classes/FoodItemNode';\r\nimport Food from './Food';\r\nimport { Console } from 'console';\r\nimport { RecentItem, RecentItemsContext } from '../Contexts/RecentItemsContext';\r\n\r\n\r\nconst Bag: React.FC<{nameParam: string}> = ({ nameParam }) => {\r\n\r\n    const openButtonText: string = \"Open\";\r\n    const saveButtonText: string = \"Save\";\r\n\r\n    const [bag, setBag] = React.useState(\r\n        {\r\n            id: '0',\r\n            name: '',\r\n            item: new BagItem(0, \"\", [], []),\r\n            foodNodes: new Array<FoodItemNode>(),\r\n            bagNodes: new Array<BagItemNode>()\r\n        }\r\n    );\r\n    const [modified, setModified] = React.useState(false);\r\n    const [name, setName] = React.useState('');\r\n    const [buttonText, setButtonText] = React.useState(openButtonText);\r\n    const [selectedFood, setSelectedFood] = React.useState('');\r\n     \r\n    const getItem = async (name: string) => {\r\n\r\n        const defaultItem = new BagItem(0, bag.name, new Array<BagItemNode>(), new Array<FoodItemNode>());\r\n\r\n        if ((name == null) || (name.trimEnd().length == 0)) {\r\n            updateItem(defaultItem);\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(\r\n            \"https://localhost:5001/api/Bag/\" + name\r\n        );\r\n        if (response.status === 200) {\r\n\r\n            const jsonItem = await response.json();\r\n            console.log(jsonItem);\r\n            const item: BagItem = jsonItem;\r\n            updateItem(item);\r\n            setButtonText('Save');\r\n\r\n        }\r\n        else {\r\n            updateItem(defaultItem);\r\n        }\r\n\r\n    }\r\n\r\n    const updateItem = (updateItem: BagItem) => {\r\n        setBag({\r\n            id: updateItem.id.toString(),\r\n            name: updateItem.name,\r\n            item: updateItem,\r\n            foodNodes: updateItem.foods,\r\n            bagNodes: updateItem.bags\r\n        });\r\n    }\r\n\r\n    const postItem = async (item: BagItem) => {\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(item)\r\n        }\r\n        const response = await fetch('https://localhost:5001/api/Bag/', requestOptions);\r\n        //const data = response.json();\r\n        //foodItem.id = data.id;\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getItem(nameParam);\r\n    }, [nameParam]);\r\n\r\n    const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const name = event.target.value;\r\n        setName(name);\r\n    }\r\n\r\n    const handleNumericInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        if (isNumeric(event.target.value) || (event.target.value === \"\")) {\r\n            setBag({ ...bag, [event.target.name]: event.target.value });\r\n        }\r\n\r\n    }\r\n\r\n    function isNumeric(val: any): val is number | string {\r\n        // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\r\n        // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n        // subtraction forces infinities to NaN\r\n        // adding 1 corrects loss of precision from parseFloat (#15100)\r\n        return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\r\n    }\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (buttonText === openButtonText) {\r\n            handleOpenEvent();\r\n        } else {\r\n            handleSaveEvent();\r\n        }\r\n    }\r\n\r\n    const handleOpenEvent = () => {\r\n        getItem(name);\r\n    }\r\n\r\n    const handleSaveEvent = () => {\r\n        const bagItem: BagItem = new BagItem(Number(bag.id), bag.name, bag.bagNodes, bag.foodNodes);\r\n        postItem(bagItem);\r\n    }\r\n\r\n    const handleFoodUpdate = (foodId: number) => {\r\n        setModified( true );\r\n    }\r\n\r\n    const handleFoodSelected = (foodName: string) => {\r\n        setSelectedFood(foodName);\r\n    }\r\n\r\n    const handleFoodQtyChanged = (node: FoodItemNode, e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\r\n        let newQty: number = Number(e.target.value);\r\n        setBag({\r\n            id: bag.id,\r\n            name: bag.name,\r\n            item: bag.item,\r\n            bagNodes: bag.bagNodes,\r\n            foodNodes: bag.foodNodes.map((currNode) => {\r\n\r\n                if (currNode.food.id == node.food.id) {\r\n                    currNode.quantity = newQty;\r\n                }\r\n                return currNode;\r\n            })\r\n        });\r\n    }\r\n\r\n    const handleBagQtyChanged = (node: BagItemNode, e: React.ChangeEvent<HTMLSelectElement>) => {\r\n\r\n        let newQty: number = Number(e.target.value);\r\n        setBag({\r\n            id: bag.id,\r\n            name: bag.name,\r\n            item: bag.item,\r\n            foodNodes: bag.foodNodes,\r\n            bagNodes: bag.bagNodes.map((currNode) => {\r\n\r\n                if (currNode.bag.id == node.bag.id) {\r\n                    currNode.quantity = newQty;\r\n                }\r\n                return currNode;\r\n            })\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"bag-layout\">\r\n                    <label className=\"bag-label\">Name</label>\r\n                    <input name=\"name\" value={name} onChange={handleNameChange} />\r\n\r\n                    <label />\r\n                    <label>Bag Items</label>\r\n\r\n                    {bag.bagNodes.map((i) => (\r\n                        <React.Fragment key={i.bag.id}>\r\n                            <label key={i.bag.id} />\r\n                            <div key={i.bag.id} className=\"node-list\">\r\n                                <select key={i.bag.id}\r\n                                    value={i.quantity}\r\n                                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\r\n                                        console.log(\"handleFoodQtyChanged\");\r\n                                        handleBagQtyChanged(i, e)\r\n                                    }\r\n                                    }>\r\n                                    <option>1</option>\r\n                                    <option>2</option>\r\n                                    <option>3</option>\r\n                                    <option>4</option>\r\n                                    <option>5</option>\r\n                                </select>\r\n                                <Button variant=\"outline-secondary\" size=\"sm\" active > {i.bag.name}</Button>\r\n                            </div>\r\n                        </React.Fragment>))}\r\n\r\n                    <label />\r\n                    <label>Food Items</label>\r\n\r\n                    {bag.foodNodes.map((i) => (\r\n                        <React.Fragment key={i.food.id}>\r\n                            <label key={i.food.id} />\r\n                            <div key={i.food.id} className=\"node-list\">\r\n                                <select key={i.food.id}\r\n                                    value={i.quantity}\r\n                                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\r\n                                            console.log(\"handleFoodQtyChanged\");\r\n                                            handleFoodQtyChanged(i, e)\r\n                                        }\r\n                                    }>\r\n                                    <option>1</option>\r\n                                    <option>2</option>\r\n                                    <option>3</option>\r\n                                    <option>4</option>\r\n                                    <option>5</option>\r\n                                </select>\r\n                                <Button key={i.food.id} variant=\"outline-secondary\" size=\"sm\" active onClick={() => handleFoodSelected(i.food.name)}> {i.food.name}</Button>\r\n                            </div>\r\n                        </React.Fragment>))}\r\n                    <label>{modified == true ? \"modified\" : \"\"}</label>\r\n                    <label id=\"placeholder\" /><Button type=\"submit\" className=\"submit-button\">{buttonText}</Button>\r\n                </div>\r\n            </form>\r\n\r\n            <div className=\"selected-food\">\r\n                <div className=\"item1\"/>\r\n                <div className=\"item2\">\r\n                    {selectedFood.trim() != \"\" &&\r\n                        <Food nameParam={selectedFood}\r\n                            updatedFoodCallback={(id: number) => { handleFoodUpdate(id) }}>\r\n                        </Food>}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n    //useEffect(() => console.log(\"xx\"), []);\r\n}\r\n\r\nexport default Bag;","import * as React from 'react';\r\nimport { Button, FormControl } from 'react-bootstrap';\r\nimport Form from 'react-bootstrap/esm/Form';\r\nimport Nav from 'react-bootstrap/esm/Nav';\r\nimport NavDropdown from 'react-bootstrap/esm/NavDropdown';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Bag from '../ItemComponents/Bag';\r\nimport Food from '../ItemComponents/Food';\r\n\r\nimport { NavLink, Route, useHistory } from \"react-router-dom\";\r\nimport { RecentItem, RecentItemsContext } from '../Contexts/RecentItemsContext';\r\n\r\nconst MainMenu: React.FC = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const recentItems = React.useContext(RecentItemsContext);\r\n\r\n    return (\r\n        <div>\r\n\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\">Food Helper App</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n\r\n                        <Nav.Link href=\"/food\">Home</Nav.Link>\r\n\r\n                        <NavDropdown title=\"Recent Items\" id=\"basic-nav-dropdown\">\r\n\r\n                                {recentItems.itemHistory.map((x, idx) => (\r\n                                    <React.Fragment>\r\n                                        <NavDropdown.Item key={idx} onClick={\r\n                                            () => {\r\n                                                history.push(x.link)\r\n                                            }\r\n                                        } > {x.name + \" \" + idx.toString()}</NavDropdown.Item>\r\n                                    </React.Fragment>\r\n                                ))}\r\n\r\n                        </NavDropdown>\r\n\r\n                        <NavDropdown title=\"Items\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={()=>history.push(\"/bag\")}>Bag</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={() => history.push(\"/food\")}>Food</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"/food\">Food (href)</NavDropdown.Item>\r\n                        </NavDropdown>\r\n\r\n                    </Nav>\r\n\r\n                        <Form>\r\n                            <Form.Group controlId=\"exampleForm.SelectCustom\">\r\n                                <Form.Label>Custom select</Form.Label>\r\n                                <Form.Control as=\"select\" custom>\r\n                                    <option>abc</option>\r\n                                    <option>acbd</option>\r\n                                    <option>acad</option>\r\n                                    <option>4</option>\r\n                                    <option>5</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Button variant=\"outline-success\">Search</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default MainMenu;","import * as React from 'react';\r\nimport { Button, FormControl } from 'react-bootstrap';\r\nimport Form from 'react-bootstrap/esm/Form';\r\nimport Nav from 'react-bootstrap/esm/Nav';\r\nimport NavDropdown from 'react-bootstrap/esm/NavDropdown';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Bag from '../ItemComponents/Bag';\r\nimport Food from '../ItemComponents/Food';\r\n\r\nimport { NavLink, Switch, Route, BrowserRouter as Router, useHistory, Link } from \"react-router-dom\";\r\nimport { RecentItem, RecentItemsContext } from '../Contexts/RecentItemsContext';\r\nimport MainMenu from './MainMenu';\r\n\r\n\r\nconst MainPage: React.FC = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const addFoodItemToHistory = (name: string) => {\r\n\r\n        console.log(\"MainPage.ts: RecentItemsContext: addFoodItemToHistory\");\r\n\r\n        const newItem = new RecentItem( name, \"/food/\" + name );\r\n        const newHist = itemHistState.itemHistory.concat( newItem );\r\n\r\n        setItemHistState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                itemHistory: prevState.itemHistory.concat(newItem)\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    const [itemHistState, setItemHistState]  = React.useState({\r\n\r\n        itemHistory: new Array<RecentItem>(),\r\n        addFoodToHistory: addFoodItemToHistory,\r\n        addBagToHistory: () => { }\r\n\r\n    });\r\n\r\n\r\n    return (\r\n\r\n    <Router>\r\n        <div>        \r\n\r\n            <RecentItemsContext.Provider value={itemHistState}>\r\n\r\n                <MainMenu></MainMenu>\r\n\r\n                <Switch>\r\n                        <Route path=\"/food/:foodName\" render={(props) => <Food nameParam={props.match.params.foodName}\r\n                            updatedFoodCallback={(i: number) => { }}></Food>} ></Route>\r\n\r\n                        <Route exact path=\"/food\" render={(props) => <Food nameParam=\"\" updatedFoodCallback={(i: number) => { }}></Food>} ></Route>\r\n\r\n                        <Route path=\"/bag/:bagName\" render={(props) => <Bag nameParam={props.match.params.bagName}></Bag>} ></Route>\r\n\r\n                        <Route exact path=\"/bag\" render={(props) => <Bag nameParam={props.match.params.bagName}></Bag>} ></Route>\r\n\r\n                        <Route exact path=\"/\" render={(props) => <Food nameParam=\"\"\r\n                            updatedFoodCallback={(i: number) => { }}></Food>} ></Route>\r\n\r\n                    </Switch>\r\n\r\n             </RecentItemsContext.Provider>\r\n\r\n         </div>\r\n     </Router>\r\n    );\r\n\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Food from './ItemComponents/Food';\nimport MainPage from './SharedComponents/MainPage';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Bag from './ItemComponents/Bag';\r\n\nfunction App() {\n\n    const [test] = React.useState(\n        {\r\n            init: \"\"\n        });\n\n    return (\n\n            <div className=\"App\">\n\n                <MainPage></MainPage>\n\n            </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport    'bootstrap-css-only/css/bootstrap.min.css'; \n//import    'mdbreact/dist/css/mdb.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}